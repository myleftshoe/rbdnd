{"version":3,"sources":["App.js","index.js"],"names":["getItems","count","Array","from","length","v","k","map","id","concat","content","App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","onDragEnd","bind","assertThisInitialized","result","destination","list","startIndex","endIndex","_result$splice","splice","removed","slicedToArray","reorder","source","index","setState","_this2","react_default","a","createElement","react_beautiful_dnd_esm","droppableId","droppableProvided","droppableSnapshot","ref","innerRef","style","isDraggingOver","overflow","background","padding","margin","border","width","maxHeight","item","key","draggableId","draggableProvided","draggableSnapshot","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","grid","placeholder","Component","defaultProps","ReactDOM","render","App_App","document","getElementById"],"mappings":"6QAKMA,EAAW,SAAAC,GAAK,OACpBC,MAAMC,KAAK,CAAEC,OAAQH,GAAS,SAACI,EAAGC,GAAJ,OAAUA,IAAGC,IAAI,SAAAD,GAAC,MAAK,CACnDE,GAAE,QAAAC,OAAUH,GACZI,QAAO,QAAAD,OAAUH,OAsCAK,cAQnB,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KACRQ,MAAQ,CACXC,MAAOtB,EAAS,KAElBc,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALSA,yEAQlBY,GAER,GAAKA,EAAOC,YAAZ,CAIA,IAAML,EAxDM,SAACM,EAAMC,EAAYC,GACjC,IAAMJ,EAASxB,MAAMC,KAAKyB,GADoBG,EAE5BL,EAAOM,OAAOH,EAAY,GAArCI,EAFuClB,OAAAmB,EAAA,EAAAnB,CAAAgB,EAAA,MAK9C,OAFAL,EAAOM,OAAOF,EAAU,EAAGG,GAEpBP,EAmDSS,CACZlB,KAAKI,MAAMC,MACXI,EAAOU,OAAOC,MACdX,EAAOC,YAAYU,OAGrBpB,KAAKqB,SAAS,CACZhB,4CAMK,IAAAiB,EAAAtB,KACP,OACEuB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBpB,UAAWN,KAAKM,WAC/BiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,YAAY,aACpB,SAACC,EAAmBC,GAApB,OACCN,EAAAC,EAAAC,cAAA,OACEK,IAAKF,EAAkBG,SACvBC,OApDQC,EAqDNJ,EAAkBI,eArDIC,EAsDtBZ,EAAK3B,MAAMuC,SAtDyB,CAClDC,WAAYF,EAAiB,YAAc,OAC3CG,QAlBW,EAmBXC,OAnBW,EAoBXC,OAAQ,iBACRC,MAAO,IACPC,UAAW,OACXN,cAkDaZ,EAAKlB,MAAMC,MAAMf,IAAI,SAACmD,EAAMrB,GAAP,OACpBG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWgB,IAAKD,EAAKlD,GAAIoD,YAAaF,EAAKlD,GAAI6B,MAAOA,GACnD,SAACwB,EAAmBC,GAApB,OACCtB,EAAAC,EAAAC,cAAA,MAAA3B,OAAAgD,OAAA,CACEhB,IAAKc,EAAkBb,UACnBa,EAAkBG,eAClBH,EAAkBI,gBAHxB,CAIEhB,OA9EAiB,EA+EEJ,EAAkBI,WA/ERC,EAgFVN,EAAkBG,eAAef,MAhFpClC,OAAAqD,EAAA,EAAArD,CAAA,CAEnBsD,WAAY,OACZhB,QAASiB,GACThB,OAAM,OAAA7C,OANK,EAML,QACN8C,OAAQ,mBAGRH,WAAYc,EAAa,aAAe,OAGrCC,MAwEkBT,EAAKhD,SAnFP,IAACwD,EAAYC,MAwFnBtB,EAAkB0B,aA1EZ,IAACrB,EAAgBC,YAULqB,aAAZ7D,EAIZ8D,aAAe,CACpBtB,SAAU,QC9CduB,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.09d3c63a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  border: '5px solid yellow',\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'red',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver, overflow) => ({\n  background: isDraggingOver ? 'lightblue' : 'grey',\n  padding: grid,\n  margin: grid,\n  border: '5px solid pink',\n  width: 250,\n  maxHeight: '50vh',\n  overflow,\n});\n\nexport default class App extends Component {\n  static propTypes = {\n    overflow: PropTypes.string,\n  };\n  static defaultProps = {\n    overflow: 'auto',\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      items: getItems(10),\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index,\n    );\n\n    this.setState({\n      items,\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(droppableProvided, droppableSnapshot) => (\n            <div\n              ref={droppableProvided.innerRef}\n              style={getListStyle(\n                droppableSnapshot.isDraggingOver,\n                this.props.overflow,\n              )}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(draggableProvided, draggableSnapshot) => (\n                    <div\n                      ref={draggableProvided.innerRef}\n                      {...draggableProvided.draggableProps}\n                      {...draggableProvided.dragHandleProps}\n                      style={getItemStyle(\n                        draggableSnapshot.isDragging,\n                        draggableProvided.draggableProps.style,\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}